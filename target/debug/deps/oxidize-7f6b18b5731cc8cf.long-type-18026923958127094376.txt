Foldl<Then<Foldr<Then<Repeated<Or<Or<To<Padded<Just<char, char, _>>, char, fn(Box<Expr>) -> Expr>, To<Padded<Just<char, char, _>>, char, fn(Box<Expr>) -> Expr>>, To<chumsky::combinator::Map<Then<Padded<Just<char, char, _>>, impl chumsky::Parser<char, (), Error = _> + Clone + '_>, fn((char, ())), (char, ())>, (), fn(Box<Expr>) -> Expr>>>, Or<Or<Padded<chumsky::combinator::Map<impl chumsky::Parser<char, <char as Character>::Collection, Error = _> + Copy + Clone, [closure@src/parser.rs:9:18: 9:29], String>>, DelimitedBy<Recursive<'_, char, Expr, _>, Just<char, char, _>, Just<char, char, _>, char, char>>, chumsky::combinator::Map<Padded<impl chumsky::Parser<char, <char as Character>::Collection, Error = _> + Copy + Clone>, fn(String) -> Expr {Expr::Var}, String>>>, [closure@src/parser.rs:26:20: 26:30], Vec<fn(Box<Expr>) -> Expr>, Expr>, Repeated<Then<Or<To<Padded<Just<char, char, _>>, char, fn(Box<Expr>, Box<Expr>) -> Expr>, To<Padded<Just<char, char, _>>, char, fn(Box<Expr>, Box<Expr>) -> Expr>>, Foldr<Then<Repeated<Or<Or<To<Padded<Just<char, char, _>>, char, fn(Box<Expr>) -> Expr>, To<Padded<Just<char, char, _>>, char, fn(Box<Expr>) -> Expr>>, To<chumsky::combinator::Map<Then<Padded<Just<char, char, _>>, impl chumsky::Parser<char, (), Error = _> + Clone + '_>, fn((char, ())), (char, ())>, (), fn(Box<Expr>) -> Expr>>>, Or<Or<Padded<chumsky::combinator::Map<impl chumsky::Parser<char, <char as Character>::Collection, Error = _> + Copy + Clone, [closure@src/parser.rs:9:18: 9:29], String>>, DelimitedBy<Recursive<'_, char, Expr, _>, Just<char, char, _>, Just<char, char, _>, char, char>>, chumsky::combinator::Map<Padded<impl chumsky::Parser<char, <char as Character>::Collection, Error = _> + Copy + Clone>, fn(String) -> Expr {Expr::Var}, String>>>, [closure@src/parser.rs:26:20: 26:30], Vec<fn(Box<Expr>) -> Expr>, Expr>>>>, [closure@src/parser.rs:37:20: 37:36], Expr, Vec<(fn(Box<Expr>, Box<Expr>) -> Expr, Expr)>>